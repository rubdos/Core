#------------------------------------------------------------------------------#
# UserConfig Template File for MSVC 2013 on Win 7 x64
#------------------------------------------------------------------------------#
# Copy this file as UserConfig.txt inside this directory to configure the
# options and paths for your build.
# Uncoment and set the values of the following lines to configure your build
#------------------------------------------------------------------------------#
# NOTE: the defaults work perfectly on most cases, don't change anything unless
# you know what you're doing
#-----------------------------------#
# WARNING: DON'T TOUCH THE NEXT LINE
#-----------------------------------#
set(YAF_USER_CONFIG ON)

#------------------------------------------------------------------------------#
# BUILD CONFIGURATION
#------------------------------------------------------------------------------#
# Build with POSIX threads (pthreads) wrapper instead of native threads 
# wrapper on windows platforms.
# NOTE: This option is ignored on *nix platforms. Default: OFF

set(WITH_Pthreads ON)

# Build font rendering with FreeType. Default: ON

set(WITH_Freetype ON)

# Build OpenEXR image I/O plugin. Default: ON 

set(WITH_OpenEXR ON)

# Build JPEG image I/O plugin. Default: ON

set(WITH_JPEG ON)

# Build PNG image I/O plugin. Default: ON

set(WITH_PNG ON)

# Build TIFF image I/O plugin. Default: ON

set(WITH_TIFF ON)

# Enable XML Loader build. Default: ON

set(WITH_XML_LOADER ON)

# Enable Qt Gui build. Default: ON

set(WITH_QT OFF)

#------------------------------------------------------------------------------#
# Options for some languages bindings
#------------------------------------------------------------------------------#
# Enable the Python bindings. Default: ON

set(WITH_YAF_PY_BINDINGS ON)

# Enable Ruby bindings. Default: OFF

set(WITH_YAF_RUBY_BINDINGS OFF)

#------------------------------------------------------------------------------#
# Options for some mode building
#------------------------------------------------------------------------------#
# NOTE: This is only to build releases, it controls the version number
# shown in yafaray-xml and the "draw parameters" parameters badge
# Default: OFF
#------------------------------------------------------------------------------#
set(BUILDRELEASE ON)

# Enable debug build mode. Default: OFF

set(DEBUG_BUILD OFF)

#------------------------------------------------------------------------------#
# Some QT setup values
#------------------------------------------------------------------------------#
# Embed font for QT GUI (useful for some buggy QT installations)
# Default: OFF
#------------------------------------------------------------------------------#
if(WITH_QT)
	# Embed font for QT GUI (useful for some buggy QT installations)
	set(EMBED_FONT_QT ON)
	# Path to qmake executable. Need for QT interface, unused on Blender exporter.
	set(YAF_USER_QT_BIN_DIR "C:/apps/Qt/4.7.1/bin")
endif()

#------------------------------------------------------------------------------#
# PATH SETTING VARIABLES
#------------------------------------------------------------------------------#
# The general install prefix
# Default:
#          "/usr/local"               on *NIX platforms
#          "C:\<Program_Files_Dir>"   on Windows platforms
# UPDATE:
# Define intermediate folder for binaries inside the building folder.
#------------------------------------------------------------------------------#
set(USER_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/thebounty")
#------------------------------------------------------------------------------#
# Define folder for include inside yaf_revision.h, generated from Cmake
set(CMAKE_INSTALL_PREFIX "$ENV{BOUNTY_ROOT}" ) #${USER_INSTALL_PREFIX})

#------------------------------------------------------------------------------#
# THE EXECUTABLES INSTALATION DIR
#------------------------------------------------------------------------------#
# This will install the binary executables in ${USER_INSTALL_PREFIX}/bin
# NOTE: under windows platforms this is the installation path and YAF_LIB_DIR
# is ignored. Default: bin
#------------------------------------------------------------------------------#
set(YAF_BIN_DIR "${USER_INSTALL_PREFIX}/bin")

#------------------------------------------------------------------------------#
# THE LIBRARIES INSTALATION DIR
#------------------------------------------------------------------------------#
# Default: lib
# This will install the libraries and plugins in ${USER_INSTALL_PREFIX}/lib
# NOTE: under windows platforms this variable is ignored
#------------------------------------------------------------------------------#
set(YAF_LIB_DIR ${YAF_BIN_DIR})

#------------------------------------------------------------------------------#
# THE PLUGIN INSTALATION DIR
#------------------------------------------------------------------------------#
# Default:
#          ${YAF_LIB_DIR}/yafaray (on *NIX platforms)
#          ${YAF_LIB_DIR}/plugins (on Windows platforms)
#------------------------------------------------------------------------------#
set(YAF_PLUGIN_DIR "${YAF_BIN_DIR}/plugins")

#------------------------------------------------------------------------------#
# OPTIONS FOR OTHERS LANGUAGE BINDINGS INSTALLATION PATHs
#------------------------------------------------------------------------------#
# The Python bindings installation path
# Default: ${CMAKE_SOURCE_DIR}/install/bindings/python
# This will install the Python bindings on ${CMAKE_SOURCE_DIR}/bindings/python
# you can set this path to your local blender scripts directory
# or whatever suits you best
#------------------------------------------------------------------------------#
if(WITH_YAF_PY_BINDINGS)
	set(YAF_BINDINGS_PY_DIR ${YAF_BIN_DIR})
endif()

#------------------------------------------------------------------------------#
# The Ruby Bindings Installation Path
# Default: ${CMAKE_SOURCE_DIR}/install/bindings/ruby
# This will install the Ruby bindings once                                     #
# ${CMAKE_SOURCE_DIR}/install/bindings/ruby                                    #
# you can set this path to whatever suits you best                             #
if(WITH_YAF_RUBY_BINDINGS)
	set(YAF_BINDINGS_RUBY_DIR ${YAF_BIN_DIR})
endif()

#------------------------------------------------------------------------------#
# USER INCLUDES AND LIBRARIES DIR PATHS 
#------------------------------------------------------------------------------#
# More than one path can be set separated by spaces ie.
# set(YAF_USER_INCLUDE_DIRS C:/include D:/mydev/include)
if(MSVC)
	# atm used for Autodesk exporters. Not need Python bindings.
	set(DEPS C:/devs/deps/vc2013)
	set(INC "${DEPS}/includes")
	set(LIBS "${DEPS}/libs")
	set(PYPATH "$ENV{PYTHONPATH}")
	
	set(YAF_USER_INCLUDE_DIRS 
		"${INC}"
		"${INC}/OpenEXR"
		"${INC}/libxml2"
		"${INC}/freetype2"
		"${PYTPATH}/include")
		
	set(YAF_USER_LIBRARY_DIRS 
		"${LIBS}"
		"${PYTPATH}/libs")
endif()

if(MINGW)
	set(DEPS C:/devs/libs/mingw64)

	set(YAF_USER_INCLUDE_DIRS 
		"${DEPS}/include"
		"${DEPS}/include/libxml"
		"${DEPS}/include/freetype"
		"${DEPS}/include/python34")
	
	set(YAF_USER_LIBRARY_DIRS "${DEPS}/lib")
endif(MINGW)

#------------------------------------------------------------------------------#
# OPTIMIZATION FLAGS OPTIONS
#------------------------------------------------------------------------------#
# Set this variables if you wish to override the default optimization flags
# Defaults on *nix platforms:
# set(USER_RELEASE_OPTIMIZATION_FLAGS "-O3 -ffast-math")
# set(USER_DEBUG_OPTIMIZATION_FLAGS "-ggdb")
#------------------------------------------------------------------------------#
# UPDATE: This is an specialized paret for OSX systems builds using Clang x64

if(APPLE)
	#set(USER_DEBUG_OPTIMIZATION_FLAGS "")
	#set(FLAGS "-m64 -arch x86_64 -Ofast -ftree-vectorize -msse -msse2 -msse3 -mssse3 -F/Library/Frameworks -fvisibility=hidden -fvisibility-inlines-hidden -stdlib=libstdc++ -flto -fvectorize -funroll-loops") # CLANG 64bit
	set(USER_RELEASE_OPTIMIZATION_FLAGS "-m64 -arch x86_64 -O3 -msse -msse2 -msse3 -mssse3 -F/Library/Frameworks -fvisibility=hidden -fvisibility-inlines-hidden -stdlib=libstdc++ -flto -fvectorize -funroll-loops") # CLANG 64bit
endif(APPLE)

#------------------------------------------------------------------------------#
# Defaults on windows platforms:
# set(USER_RELEASE_OPTIMIZATION_FLAGS "/Ot /Ox")
# set(USER_DEBUG_OPTIMIZATION_FLAGS "/Zi /GS /RTC1")
# IMPORTANT NOTE: USE QUOTATION MARKS ON THE FLAGS

#set(USER_RELEASE_OPTIMIZATION_FLAGS "/O3 /ffast-math /msse")
#set(USER_DEBUG_OPTIMIZATION_FLAGS "-ggdb")

#------------------------------------------------------------------------------#
# Set this variables if you wish to append extra compiler flags to your build
# this ones will be appended, won't override defaults
# IMPORTANT NOTE: USE QUOTATION MARKS ON THE FLAGS

#set(USER_RELEASE_EXTRA_FLAGS "")
#set(USER_DEBUG_EXTRA_FLAGS "")

#------------------------------------------------------------------------------#
# EXECUTABLE LOCATION VARIABLES
#------------------------------------------------------------------------------#
# Here you can set the paths to search for executables, you can leave blank
# the ones you don't need.
# Path to swig executable. Module from CMakeModules is use for search path
if(WITH_YAF_PY_BINDINGS OR WITH_YAF_RUBY_BINDINGS)

	set(YAF_USER_SWIG_BIN_DIR "C:/devs/swigwin30")
	
endif()

#------------------------------------------------------------------------------#
# EXTRA LINKING VARIABLES
#------------------------------------------------------------------------------#
# The variable YAF_USER_EXTRA_LIBS can be used to add extra linkage in case
# one of your dependencies has a dynamic link that is not included in the
# default YafaRay configuration, for example libXML2 can be dynamically
# linked against some libs like iconv and the default config doesn't include
# iconv as a linking lib, therefore you can use:
#
#    set(YAF_USER_EXTRA_LIBS -liconv)           *Syntax for GCC linker
#    or
#    set(YAF_USER_EXTRA_LIBS libiconv.lib)      *Syntax for MSVC linker
#
# to add iconv to the library linkage list, again you can specify several
# libs at once in a list separated by spaces ie.
#    set(YAF_USER_EXTRA_LIBS -lmylib1 -lmylib2 -lmylib2)
#    or
#    set(YAF_USER_EXTRA_LIBS libmylib1.lib libmylib2.lib libmylib2.lib)
#------------------------------------------------------------------------------#
#set(YAF_USER_EXTRA_LIBS "")

#------------------------------------------------------------------------------#
# EXTRA DEFINES VARIABLE
#------------------------------------------------------------------------------#
# Use this variable to set extra defines that your build might require
#------------------------------------------------------------------------------#

set(YAF_USER_EXTRA_DEFS "-DOPENEXR_DLL -DMS_WIN64")

#------------------------------------------------------------------------------#
# REQUIRED PYTHON VERSIONS
#------------------------------------------------------------------------------#
# Use this variable to set the Python version you want to use for the bindings
# Default: 2.6
# Change to the same Python version used on Blender (example: 3.3 for 2.70)
#------------------------------------------------------------------------------#
if(WITH_YAF_PY_BINDINGS)

	set(YAF_PY_VERSION 3.4)
	
endif()

#------------------------------------------------------------------------------#
# MISC. CONFIGURATIONS 
#------------------------------------------------------------------------------#
# Minimal ray distance. Default is 0.00005

#set(YAF_MIN_RAY_DIST 0.00005)

# Shadow bias. Default: 0.0005 

#set(YAF_SHADOW_BIAS 0.0005)

#------------------------------------------------------------------------------#
# OPTIONS FOR BLENDER ADD-ON
#------------------------------------------------------------------------------#
# Options for building binaries as a self-contained add-on for Blender
# Default: OFF

#set(BLENDER_ADDON ON)

# Set the branch to use when building the add-on. If you use Blender v2.62,
# uncomment the next line and change from "master" to "blender-2.62"

#set(BLENDER_EXPORTER_BRANCH "master")

#------------------------------------------------------------------------------#
# OPTIONS FOR CODE SPEED UP
#------------------------------------------------------------------------------#
# Options for make builds with fast mathematical functions approximantions
# Default: ON

#set(FAST_MATH OFF)
#set(FAST_TRIG OFF)

#------------------------------------------------------------------------------#
#								END OF FILE
#------------------------------------------------------------------------------#